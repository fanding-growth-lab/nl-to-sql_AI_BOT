[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-nl-to-sql-bot"
version = "1.0.0"
description = "AI-Powered NL-to-SQL Slack Bot with Auto Learning System"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "fanding", email = "fanding@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
]
requires-python = ">=3.9"
dependencies = [
    # Core Framework
    "fastapi==0.104.1",
    "uvicorn[standard]==0.24.0",
    
    # Configuration Management
    "pydantic==2.5.0",
    "pydantic-settings==2.1.0",
    
    # Database
    "mysql-connector-python==8.2.0",
    "sqlalchemy==2.0.23",
    "pymysql==1.1.0",
    
    # Slack Integration
    "slack-bolt==1.18.1",
    "slack-sdk==3.26.1",
    
    # LLM Integration
    "langchain==0.1.0",
    "langchain-google-genai==0.0.6",
    "langgraph==0.0.20",
    
    # Google AI
    "google-generativeai==0.3.2",
    
    # HTTP Client
    "httpx==0.25.2",
    "requests==2.31.0",
    
    # Logging
    "structlog==23.2.0",
    
    # Environment
    "python-dotenv==1.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    
    # Development
    "black==23.11.0",
    "isort==5.12.0",
    "flake8==6.1.0",
    "mypy==1.7.1",
]

docs = [
    "sphinx==7.1.2",
    "sphinx-rtd-theme==1.3.0",
    "sphinx-design==0.5.0",
]

[project.urls]
Homepage = "https://github.com/fanding/TASK-MASTER"
Repository = "https://github.com/fanding/TASK-MASTER"
Documentation = "https://github.com/fanding/TASK-MASTER/blob/main/docs"
Issues = "https://github.com/fanding/TASK-MASTER/issues"

[project.scripts]
nl-to-sql-bot = "src.main:main"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "uvicorn", "pydantic", "sqlalchemy", "slack_bolt"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "slack_bolt.*",
    "slack_sdk.*",
    "langchain.*",
    "langgraph.*",
    "google.generativeai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
